{
  "componentId": "class_replacer",
  "componentType": "node.algorithm.policy",
  "id": "pol-class-replacer",
  "label": "Policy",
  "name": "Class Replacer Policy",
  "category": "class_transformer",
  "framework": "Python",
  "license": "MIT",
  "repo_url": "https://github.com/aios/policies",

  "modelDetails": {
    "description": "Class transformation policy that replaces object class labels with alternative class names based on predefined mapping rules",
    "intended_use": "Standardize class names across different models, create domain-specific taxonomies, or map fine-grained classes to broader categories",
    "limitations": ["Only supports exact string matching", "Case-sensitive replacements", "Static mapping rules"],
    "ethical_considerations": "Class remapping may affect fairness if certain demographic groups are systematically recategorized"
  },

  "parameters": {
    "computational_complexity": "O(n) where n=number of objects",
    "dependencies": ["python-stdlib"],
    "memory_footprint": "Minimal",
    "processing_type": "string_replacement_mapping"
  },

  "configuration": {
    "class_replace_tuples": {
      "description": "List of tuples defining (original_class, replacement_class) mappings",
      "type": "list",
      "required": true,
      "format": [["original_class", "new_class"], ["auto", "auto_rickshaw"], ["bus", "car"]],
      "example": [["auto", "auto_rickshaw"], ["bus", "car"], ["motorbike", "motorcycle"]]
    },
    "case_sensitive": {
      "description": "Whether class name matching should be case sensitive",
      "type": "boolean",
      "default": true
    },
    "preserve_unmapped": {
      "description": "Whether to keep classes that don't have replacement mappings",
      "type": "boolean", 
      "default": true
    },
    "default_replacement": {
      "description": "Default class name for unmapped classes (if preserve_unmapped is false)",
      "type": "string",
      "default": "unknown"
    },
    "bidirectional": {
      "description": "Whether mappings should work in both directions",
      "type": "boolean",
      "default": false
    }
  },

  "dynamic_parameters": {
    "supports_runtime_updates": true,
    "updateable_parameters": ["class_replace_tuples", "case_sensitive", "preserve_unmapped", "default_replacement"],
    "update_latency_ms": 5,
    "api_endpoints": {
      "update_parameters": "/api/v1/policies/class_replacer/update_parameters",
      "update_mappings": "/api/v1/policies/class_replacer/update_mappings"
    }
  },

  "runtime": {
    "cpu_intensive": false,
    "gpu_required": false,
    "min_ram_mb": 50,
    "recommended_cpu": "Any CPU",
    "python_version": "3.6+",
    "dependencies": {}
  },

  "benchmarks": {
    "throughput": {
      "objects_per_second": 200000,
      "latency_ms": 0.005,
      "memory_per_mapping_bytes": 64
    },
    "mapping_accuracy": {
      "exact_match_rate": 1.0,
      "case_handling": "configurable",
      "edge_case_robustness": "high"
    }
  },

  "produces": ["relabeled_detections", "mapping_statistics"],
  "consumes": ["classified_detections"],
  
  "input_formats": ["OD1"],
  "output_formats": ["OD1"],

  "sources": [
    {
      "title": "Class Taxonomy and Ontology Mapping",
      "url": "https://arxiv.org/abs/class-taxonomy-mapping"
    },
    {
      "title": "Object Detection Class Standardization",
      "url": "https://ieeexplore.ieee.org/document/class-standardization"
    }
  ],

  "notes": "Extremely fast and lightweight transformation. Essential for model interoperability and domain adaptation. Consider using lowercase normalization for robust matching."
}
